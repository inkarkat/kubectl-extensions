#!/bin/bash
set -o noglob
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Setup / refresh / bootstrap the links for the Unixhome repository from the
Kubernetes host into the POD (or matching POD-PATTERN) [of container
CONTAINER-NAME].
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[KUBECTL-ARGS] POD[-PATTERN] [-c CONTAINER] [--bootstrap] [--check|--nobackup|--backup BACKUPDIR] [-v|--verbose [-v|--verbose]|-q|--quiet] [-?|-h|--help]'
}

typeset -a kubectlArgs=()
typeset -a containerArgs=()
typeset -a setupUnixhomeArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	-c)		containerArgs+=("$1" "$2"); shift; shift;;
	-+([vq]))	setupUnixhomeArgs+=("$1"); shift;;
	--@(bootstrap|check|nobackup|verbose|quiet))	setupUnixhomeArgs+=("$1"); shift;;
	--@(backup))	setupUnixhomeArgs+=("$1" "$2"); shift; shift;;
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	*)		kubectlArgs+=("$1"); shift;;
    esac
done
if [ ${#kubectlArgs[@]} -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

IFS=$'\n'
typeset -a pods=($(kubectl-getg --no-headers=true "${kubectlArgs[@]}" | awk '{ print $1 }'))
[ ${#pods[@]} -gt 0 ] || exit 1

typeset -a kubectlArgsWithoutPod=()
for ka in "${kubectlArgs[@]}"
do
    [ "$({ echo -; printf '%s\n' "${pods[@]}"; } | grep -v -e "$ka")" = '-' ] || kubectlArgsWithoutPod+=("$ka")
done

if type -t header >/dev/null; then
    typeset -a headerFirstArg=(--first)
    printHeader()
    {
	header "${headerFirstArg[@]}" "$@"
	headerFirstArg=()
    }
else
    printHeader() { :; }
fi

status=0
for pod in "${pods[@]}"
do
    [ ${#pods[@]} -gt 1 ] && printHeader "$pod"

    homeDirspec="$(kubectl exec "$pod" "${containerArgs[@]}" "${kubectlArgsWithoutPod[@]}" -- bash -c 'echo $HOME')" || { status=$?; printf >&2 'ERROR: Failed to obtain home directory for %s.\n' "$pod"; continue; }
    [ -n "$homeDirspec" ] || { status=$?; printf >&2 'ERROR: Obtained no home directory for %s.\n' "$pod"; continue; }

    kubectl cp ~/Unixhome "${pod}:${homeDirspec%/}/" "${containerArgs[@]}" "${kubectlArgsWithoutPod[@]}" || { status=$?; printf >&2 'ERROR: Could not copy Unixhome into the container in %s.\n' "$pod"; continue; }

    kubectl exec "$pod" "${containerArgs[@]}" "${kubectlArgsWithoutPod[@]}" -- "${homeDirspec%/}/Unixhome/bin/ingo/syncUnixhome-core/bin/setupUnixhome" "${setupUnixhomeArgs[@]}" &&
	printf 'Successfully set up Unixhome in %s under %s.\n' "$pod" "${homeDirspec%/}" ||
	{ status=$?; printf >&2 'ERROR: Setup of Unixhome failed in %s.\n' "$pod"; }
done
exit $status
