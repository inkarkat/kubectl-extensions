#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Grep for EXPR in list of resources.
With --, list latest resources.
Without arguments, list latest pods.
Usage: "$(basename "$1")" TYPE [...] [EXPR] [--] [-?|-h|--help]
Usage: "$(basename "$1")" [EXPR] [--] [-?|-h|--help]
HELPTEXT
}

typeset -a kcArgs=()
kcHeaderArg=
[ -t 1 ] || kcHeaderArg='--no-headers=true'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--all-namespaces)	kcArgs+=("$1"); shift;;
	--namespace|-n|--cluster|--context)	kcArgs+=("$1" "$2"); shift; shift;;
	--no-headers=*)	kcHeaderArg="$1"; shift;;
	--)		break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
[ "$kcHeaderArg" ] && kcArgs=("$kcHeaderArg" "${kcArgs[@]}")

case $# in
    0) set -- pods --;;
    1) set -- pods "$1";;
    2) set -- pods "$2";;
esac
lastArg=${!#}

if [ "$lastArg" = '--' ]; then
    kubectl-get "${@:1:$(($#-1))}" "${kcArgs[@]}" --sort-by='{.metadata.creationTimestamp}' | \
	{ IFS=$'\n' read header; printf '%s\n' "$header"; tac | \
	    # If there are resources aged less than 1d, show all of those, but
	    # not more. If all resources are at least one day old, show all
	    # those with the same smallest number of days, but not the even
	    # older ones.
	    sed -e '/[0-9]d$/{ x; /^$/{ 1!{ s/.*//; q }; g; b }; G; /\([0-9]\+d\)\n.*\1$/!{ s/.*//; q }; s/^[^\n]*\n// }'; \
	}
else
    kubectl-get "${@:1:$(($#-1))}" "${kcArgs[@]}" | \
	{ IFS=$'\n' read header; printf '%s\n' "$header"; grep "$lastArg"; }
fi
