#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Grep for EXPR in list of resources.
With --, list latest resources.
Without arguments, list latest pods.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" 'TYPE [...] EXPR|-- [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[EXPR|--] [-?|-h|--help]'
}

typeset -a args=()
typeset -a kcArgs=()
kcHeaderArg=
[ -t 1 ] || kcHeaderArg='--no-headers=true'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--all-namespaces)	kcArgs+=("$1"); shift;;
	--namespace|-n|--cluster|--context)	kcArgs+=("$1" "$2"); shift; shift;;
	--no-headers=*)	kcHeaderArg="$1"; shift;;
	--)		break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"
[ "$kcHeaderArg" ] && kcArgs=("$kcHeaderArg" "${kcArgs[@]}")
isHeader=t; [ "$kcHeaderArg" = '--no-headers=true' ] && isHeader=

case $# in
    0) set -- pods --;;
    1) set -- pods "$1";;
esac
lastArg=${!#}

if [ "$lastArg" = '--' ]; then
    kubectl-get "${@:1:$(($#-1))}" "${kcArgs[@]}" --sort-by='{.metadata.creationTimestamp}' | \
	{
	    if [ "$isHeader" ]; then
		IFS=$'\n' read header; printf '%s\n' "$header"
	    fi
	    tac | \
	    # If there are resources aged less than 1d, show all of those, but
	    # not more. If all resources are at least one day old, show all
	    # those with the same smallest number of days, but not the even
	    # older ones.
	    sed -e '
/[0-9]d$/{
    x
    /^$/{
	1!{ s/.*//; q }
	g
	b
    }
    G
    /\([0-9]\+d\)\n.*\1$/!{ s/.*//; q }
    s/^[^\n]*\n//
}';
	}
else
    kubectl-get "${@:1:$(($#-1))}" "${kcArgs[@]}" | \
	{
	    if [ "$isHeader" ]; then
		IFS=$'\n' read header; printf '%s\n' "$header"
	    fi
	    grep "$lastArg"; }
fi
