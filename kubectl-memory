#!/bin/bash
#!/usr/bin/env bash

# This script reproduces what the kubelet does
# to calculate memory.available relative to root cgroup.

# current memory usage
memory_capacity_in_kb=$(cat /proc/meminfo | grep MemTotal | awk '{print $2}')
memory_capacity_in_bytes=$((memory_capacity_in_kb * 1024))
memory_usage_in_bytes=$(cat /sys/fs/cgroup/memory/memory.usage_in_bytes)
memory_total_inactive_file=$(cat /sys/fs/cgroup/memory/memory.stat | grep total_inactive_file | awk '{print $2}')

memory_working_set=${memory_usage_in_bytes}
if [ "$memory_working_set" -lt "$memory_total_inactive_file" ];
then
    memory_working_set=0
else
    memory_working_set=$((memory_usage_in_bytes - memory_total_inactive_file))
fi

bytesToUnits()
{
    local what="${1:?}"; shift
    local byteNum="${1:?}"; shift

    local kibiNum=$((byteNum / 1024))
    local mebiNum=$((kibiNum / 1024))
    local gibiNum=$((mebiNum / 1024))
    printf '%-30s %14d bytes = %11d KiB = %8d MiB = %5d GiB\n' "$what" "$byteNum" "$kibiNum" "$mebiNum" "$gibiNum"
}
memory_available_in_bytes=$((memory_capacity_in_bytes - memory_working_set))

bytesToUnits memory.capacity_in_bytes "$memory_capacity_in_bytes"
bytesToUnits memory.usage_in_bytes "$memory_usage_in_bytes"
bytesToUnits memory.total_inactive_file "$memory_total_inactive_file"
bytesToUnits memory.working_set "$memory_working_set"
bytesToUnits memory.available_in_bytes "$memory_available_in_bytes"


[ "$HOSTNAME" ] || exit
allocatable_memory_in_kibi="$(kubectl get node "$@" -o json "$HOSTNAME" | jq -r '.status.allocatable.memory')"
allocatable_memory_in_bytes=$((${allocatable_memory_in_kibi%Ki} * 1024))

used_memory_in_mebi=$(kubectl top node "$@" "$HOSTNAME" | awk 'END { print $4 }')
used_memory_in_bytes=$((${used_memory_in_mebi%Mi} * 1024 * 1024))

echo
bytesToUnits allocatable_memory "$allocatable_memory_in_bytes"
bytesToUnits used_memory "$used_memory_in_bytes"
bytesToUnits available_memory "$((allocatable_memory_in_bytes - used_memory_in_bytes))"
