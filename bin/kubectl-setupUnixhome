#!/bin/bash
set -o noglob
shopt -qs extglob

readonly UNIXHOME="$HOME/Unixhome"

printUsage()
{
    cat <<HELPTEXT
Setup / refresh / bootstrap the links for the Unixhome repository from the
Kubernetes host into the POD (or matching POD-PATTERN) [of container
CONTAINER-NAME].
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[KUBECTL-ARGS] POD[-PATTERN] [-c CONTAINER] [--bootstrap] [--check|--nobackup|--backup BACKUPDIR] [-v|--verbose [-v|--verbose]|-q|--quiet] [-?|-h|--help]'
}

isLaunch=
typeset -a kubectlArgs=()
typeset -a setupUnixhomeArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--launch)	shift; pod="$1"; shift; isLaunch=t;;
	-+([vq]))	setupUnixhomeArgs+=("$1"); shift;;
	--@(bootstrap|check|nobackup|verbose|quiet))	setupUnixhomeArgs+=("$1"); shift;;
	--@(backup))	setupUnixhomeArgs+=("$1" "$2"); shift; shift;;
	*)		kubectlArgs+=("$1"); shift;;
    esac
done
if [ ${#kubectlArgs[@]} -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
elif [ ! -d "$UNIXHOME" ]; then
    echo >&2 'FATAL: Unixhome does not exist.'
    exit 3
fi

if [ "$isLaunch" ]; then
    homeDirspec="$(kubectl-wrapper exec "$pod" "${kubectlArgs[@]}" -- bash -c 'echo $HOME')" || { status=$?; printf >&2 'ERROR: Failed to obtain home directory for %s.\n' "$pod"; exit $status; }
    [ -n "$homeDirspec" ] || { status=$?; printf >&2 'ERROR: Obtained no home directory for %s.\n' "$pod"; exit $status; }

    [ -t 1 ] && printf 'Copying Unixhome to %s...\r' "$pod"
    kubectl cp "$UNIXHOME" "${pod}:${homeDirspec%/}/" "${kubectlArgs[@]}" || { status=$?; printf >&2 'ERROR: Could not copy Unixhome into the container in %s.\n' "$pod"; exit $status; }

    if kubectl-wrapper exec "$pod" "${kubectlArgs[@]}" -- "${homeDirspec%/}/Unixhome/bin/ingo/syncUnixhome-core/bin/setupUnixhome" "${setupUnixhomeArgs[@]}"; then
	printf 'Successfully set up Unixhome in %s under %s.\n' "$pod" "${homeDirspec%/}"
    else
	status=$?; printf >&2 'ERROR: Setup of Unixhome failed in %s.\n' "$pod"; exit $status
    fi
else
    readonly scriptFilespec="${BASH_SOURCE[0]}"
    eval kubectl-poddo "${kubectlArgs[@]}" -- "$scriptFilespec" --launch '{}' "${setupUnixhomeArgs[@]}"
fi
