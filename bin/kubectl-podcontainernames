#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
List the name of each container.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[KUBECTL-ARGS ...] [POD-NAME ...] [-- POD-PATTERN|' -c CONTAINER-PATTERN'] [-?|-h|--help]"
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac


typeset -a filter=()
if [ $# -ge 2 ] && [ "${@:(-2):1}" = -- ]; then
    filter=(grep -e "^[^ ]*${!#}")
    set -- "${@:1:$(($#-2))}"
fi

: ${KUBECTL_IGNORE_CONTAINERNAMES='\(kubernetes-\)\?vault-renew'}
typeset -a containerFilter=()
if [ "$KUBECTL_IGNORE_CONTAINERNAMES" ]; then
    ignoredContainerBranches="${KUBECTL_IGNORE_CONTAINERNAMES// /\\|}"
    containerFilter=(sed -e "s# -c \\(${ignoredContainerBranches}\\)\\( \\|\$\\)#\\2#")
fi

getAllPodContainerNames()
{
    local -r SELECTOR='{{.metadata.name}}{{range .spec.containers}} -c {{.name}}{{end}}{{"\n"}}'
    kubectl get pods "$@" -o go-template --template "{{if .items}}{{range .items}}{{if not .status.reason}}${SELECTOR}{{end}}{{end}}{{else}}${SELECTOR}{{end}}"
}

eval 'getAllPodContainerNames "$@"' "${filter:+|}" '"${filter[@]}"' "${containerFilter:+|}" '"${containerFilter[@]}"'
