#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
List the mounts of each container [of container CONTAINER] for PODs [matching
EXPR].
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[KUBECTL-ARGS ...] [POD-NAME ...] [-- EXPR] [-c CONTAINER|''] [-?|-h|--help]"
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

typeset -a emptyFilter=(sed
    -e '/^  [^ ]\+/{ N; /\n$/d }'
    # Also suppress the final empty line. Note: The filter has to come last so
    # that the previous filters can still indiscriminately use an empty line as
    # the block separator without a special case of the last line.
    -e '${ /^$/d }'
)

typeset -a singleResultFilter=()
typeset -a finalFilter=(sed \
    -e 's#^\t##'
    -e 't noPod'
    -e 's#^\([^\t]\+\)\t#  \1:\n#'
    -e ':noPod'
    -e 's#\t#\n#g'
)

filterContainer="$KUBECTL_DEFAULT_CONTAINER"
if [ $# -ge 2 ] && [ "${*:(-2):1}" = '-c' ]; then
    filterContainer="${!#}"
    set -- "${@:1:$(($#-2))}"
    # PODs that don't have any matching containers are omitted automatically here.
fi

typeset -a podFilter=()
if [ $# -ge 2 ] && [ "${*:(-2):1}" = -- ]; then
    podFilterExpr=${!#}
    podFilter=(grep -e "^[^ ]*$podFilterExpr")
    set -- "${@:1:$(($#-2))}"

    # Omit POD prefix if there's only a single matching POD and it exactly
    # matches the passed EXPR.
    literalPodFilterExpr=$(printf %s "$podFilterExpr" | sed -e 's/[][\$*.^#]/\\&/g')
    singleResultFilter=(sed -e '1!b' -e "\$s#^${literalPodFilterExpr}\\( -c [^[:space:]]]\\+\\)\\?\\t#\t#")
fi

: ${KUBECTL_IGNORE_CONTAINERNAMES='\(kubernetes-\)\?vault-renew'}
typeset -a containerFilter=()
if [ "$KUBECTL_IGNORE_CONTAINERNAMES" ]; then
    ignoredContainerBranches="${KUBECTL_IGNORE_CONTAINERNAMES// /\\|}"
    containerFilter=(sed -e "/ -c \\(${ignoredContainerBranches}\\)\t/d")
fi

getAllPodContainerMounts()
{
    if [ -n "$filterContainer" ]; then
	local -r SELECTOR='{{$podName := .metadata.name}}{{range .spec.containers}}{{if eq .name "'"$filterContainer"'"}}{{$podName}}{{"\t"}}{{range .volumeMounts}}{{.mountPath}} <- {{.name}}{{if .subPath}}:{{.subPath}}{{end}}{{"\t"}}{{end}}{{end}}{{"\n"}}{{end}}'
    else
	local -r SELECTOR='{{$podName := .metadata.name}}{{range .spec.containers}}{{$podName}} -c {{.name}}{{"\t"}}{{range .volumeMounts}}{{.mountPath}} <- {{.name}}{{if .subPath}}:{{.subPath}}{{end}}{{"\t"}}{{end}}{{"\n"}}{{end}}'
    fi
    kubectl get pods "$@" -o go-template --template "{{if .items}}{{range .items}}{{if not .status.reason}}${SELECTOR}{{end}}{{end}}{{else}}${SELECTOR}{{end}}"
}

eval 'getAllPodContainerMounts "$@"' \
    "${podFilter:+|}" '"${podFilter[@]}"' \
    "${containerFilter:+|}" '"${containerFilter[@]}"' \
    "${singleResultFilter:+|}" '"${singleResultFilter[@]}"' \
    "${finalFilter:+|}" '"${finalFilter[@]}"' \
    "${emptyFilter:+|}" '"${emptyFilter[@]}"'
