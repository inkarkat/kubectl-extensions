#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Print the PV subvolume name (and more details) for the PVCs of the given PODs.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--unpiped] [KUBECTL-ARGS ...] [SELECTOR|POD-NAME ...] [-?|-h|--help]'
}

typeset pvOutputArgs=()
typeset -a args=()
typeset -a kubectlGlobalArgs=()
typeset -a kcHeaderArg=()
typeset -a kubectlSelectorArgs=()
isPiped=
if ! [ -t 1 -o "$_kubectl_toterm" ]; then
    kcHeaderArg=(--no-headers=true)
    isPiped=t
fi
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--unpiped)	shift; isPiped=;;

	--all-namespaces)
			kubectlGlobalArgs+=("$1"); shift;;
	--namespace|-n|--cluster|--context)
			kubectlGlobalArgs+=("$1" "$2"); shift; shift;;
	--selector|-l)	kubectlSelectorArgs+=("$1" "$2"); shift; shift;;
	--selector=*)	kubectlSelectorArgs+=("$1"); shift;;
	--no-headers=*)	kcHeaderArg=("$1"); shift;;

	--output|-o)	pvOutputArgs+=("$1" "${2?}"); shift; shift;;
	--output=*)	pvOutputArgs+=("$1"); shift;;

	--)		break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"
[ ${#pvOutputArgs[@]} -gt 0 ] || pvOutputArgs=(--output custom-columns=SUBVOLUME:.spec.csi.volumeAttributes.subvolumeName,CAPACITY:.spec.capacity.storage,STATUS:.status.phase,CLAIM:.spec.claimRef.name,AGE:.metadata.creationTimestamp)

typeset -a results=()
query()
{
    readarray -t results < <(kubectl get "$@"; printf '\n%d\n' "$?")	# Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
    [ ${results[-1]} -ne 0 ] && return ${results[-1]}
    unset 'results[-1]'; [ -z "${results[-1]}" ] && unset 'results[-1]'
    [ "${results[*]}" = '<no value>' ] && return 1
    return 0
}

readonly PV_SELECTOR='{{.spec.volumeName}}{{"\n"}}'
readonly PVC_SELECTOR='{{range .spec.volumes}}{{if ne .persistentVolumeClaim.claimName nil}}{{.persistentVolumeClaim.claimName}}{{"\n"}}{{end}}{{end}}'

# First try to directly get the PVCs (works if nothing or a selector has been passed).
if ! query pvc "${kubectlSelectorArgs[@]}" "${kubectlGlobalArgs[@]}" "$@" -o go-template --template "{{if .items}}{{range .items}}${PV_SELECTOR}{{end}}{{else}}${PV_SELECTOR}{{end}}" 2>/dev/null; then
    # If that failed, try to get the POD(s) and extract the (PVCs) from there.
    query pods "${kubectlSelectorArgs[@]}" "${kubectlGlobalArgs[@]}" "$@" -o go-template --template "{{if .items}}{{range .items}}${PVC_SELECTOR}{{end}}{{else}}${PVC_SELECTOR}{{end}}" || exit $?
    query pvc "${kubectlGlobalArgs[@]}" -o go-template --template "{{if .items}}{{range .items}}${PV_SELECTOR}{{end}}{{else}}${PV_SELECTOR}{{end}}" "${results[@]}" || exit $?
fi
[ ${#results[@]} -gt 0 ] || exit 99

if [ "$isPiped" ]; then
    # DWIM: When piped into another command or captured, just print the first
    # (identifier) column and default to just one line of output, so that it can
    # be combined with other commands.
    filter='head -n 1 | field 1'
fi

eval 'kubectl get pv "${pvOutputArgs[@]}" "${kcHeaderArg[@]}" "${kubectlGlobalArgs[@]}" "${results[@]}"' "${filter:+|}$filter"
