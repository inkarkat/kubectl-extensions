#!/bin/bash
set +o pipefail	# Only parse() determines success.

: ${KUBECTL_WAIT_MAX_UPTIME_IN_SECONDS_FOR_NEWNESS=60}
: ${KUBECTL_WAIT_INTERVAL=1s}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--wait-for-restart] [-W|--no-initial-wait] [-n|--namespace NAMESPACE] ... [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" "... POD[-PATTERN] [-c CONTAINER|''] [SUBCOMMAND ...]"
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [SUBCOMMAND ...] -- POD[-PATTERN]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [SUBCOMMAND ...] [--] POD[-PATTERN] -c CONTAINER'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Wait until CONTAINER in POD (or matching POD-PATTERN) is running again [and
execute the kubectl SUBCOMMAND with the POD -c CONTAINER arguments then].
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --wait-for-restart|-r
			Abort if POD / CONTAINER do not exist yet. By default,
			we're also waiting for a POD to be created.
    --no-initial-wait|-W
			Immediately succeed if the POD is currently running; do
			not wait until the currently running POD goes down.
HELPTEXT
}

isAllowNonexistentPods=t
# Extract the --namespace argument; it may appear anywhere, so we need to go through all command-line arguments and filter them out.
typeset -a kubectlGlobalArgs=()
typeset -a allargs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--all-namespaces|-A)
			kubectlGlobalArgs+=("$1"); shift;;
	--namespace|-n|--cluster|--context)
			kubectlGlobalArgs+=("$1" "$2"); shift; shift;;

	--wait-for-restart|-r)	shift; isAllowNonexistentPods=;;
	--no-initial-wait|-W)	shift; KUBECTL_WAIT_MAX_UPTIME_IN_SECONDS_FOR_NEWNESS=2147483647;;
	*)			allargs+=("$1"); shift;;
    esac
done
set -- "${allargs[@]}"

case "$1" in
    --help|-h|-\?)  shift; printLongUsage "$0"; exit 0;;
esac
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

container="$KUBECTL_DEFAULT_CONTAINER"
if [ "${*:(-2):1}" = '-c' ]; then
    # [SUBCOMMAND ...] [--] POD -c CONTAINER
    podPattern="${*:(-3):1}"
    container="${!#}"
    [ "${*:(-3):1}" = '--' ] && \
	set -- "${@:1:$(($#-4))}" || \
	set -- "${@:1:$(($#-3))}"
elif [ "${*:(-2):1}" = '--' ]; then
    # [SUBCOMMAND ...] -- POD
    podPattern="${!#}"
    container=
    set -- "${@:1:$(($#-2))}"
else
    # POD [-c CONTAINER] [SUBCOMMAND ...]
    podPattern="$1"; shift
    container=
    if [ "$1" = -c ]; then
	container="${2:?}"
	shift; shift
    fi
fi


typeset -a podFilter=(grep -e "^[^ ]*$podPattern")
: ${KUBECTL_IGNORE_CONTAINERNAMES='\(kubernetes-\)\?vault-renew'}
typeset -a containerFilter=()
if [ -n "$container" ]; then
    containerFilter=(sed -e "s#\\( -c [^ ]\\+ [0-9]\\+ [^ ]\\+\\)*\\( -c ${container} [0-9]\\+ [^ ]\\+\\)\\( -c [^ ]\\+ [0-9]\\+ [^ ]\\+\\)*\$#\\2#")
elif [ "$KUBECTL_IGNORE_CONTAINERNAMES" ]; then
    ignoredContainerBranches="${KUBECTL_IGNORE_CONTAINERNAMES// /\\|}"
    containerFilter=(sed -e "s# -c \\(${ignoredContainerBranches}\\) [0-9]\\+ [^ ]\\+##")
fi

if type -t reldate > /dev/null; then
    showDate()
    {
	reldate <<<"$1"
    }
    showDuration()
    {
	printf 'since '
	reldate <<<"$1"
    }
else
    showDate()
    {
	date --date "$1"
    }
    showDuration()
    {
	local now=$(date +%s)
	local lastEpoch=$(date --date "$1" +%s)
	local stateDurationInSeconds=$((now - lastEpoch))
	stateDurationInSecondsPlural=s; [ $stateDurationInSeconds -eq 1 ] && stateDurationInSecondsPlural=
	printf 'for %d second%s\n' "$stateDurationInSeconds" "$stateDurationInSecondsPlural"
    }
fi
statusprintf()
{
    local isFirst="${1?}"; shift
    typeset format="${1:?}"; shift
    overwritePrevious='[1F[2K'
    [ "$isFirst" ] && overwritePrevious=
    printf >&2 "%s${format}\n" "$overwritePrevious" "$@"
}
spinningprintf()
{
    local isFirst="${1?}"; shift
    typeset format="${1:?}"; shift
    overwritePrevious='[1F[2K'
    [ "$isFirst" ] && overwritePrevious=
    typeset SPINNER='/-\|'
    printf >&2 "%s${format} %s\\n" "$overwritePrevious" "$@" "${SPINNER:$((SECONDS % 4)):1}"
}
printErrorResults()
{
    local message="$1"; shift
    local sep=
    printf >&2 '%s' "$message"
    for r
    do
	printf >&2 '%s%s' "$sep" "$r"
	sep=', '
    done
    printf >&2 '\n'
}

getPodContainerStartTimes()
{
    local -r SELECTOR='{{.metadata.name}}{{range .status.containerStatuses}} -c {{.name}} {{.restartCount}} {{if .state.running}}{{.state.running.startedAt}}{{else}}{{ range $key, $value := .state }}{{$key}}{{end}}{{end}}{{end}}{{"\n"}}'
    kubectl get pods "$@" -o go-template --template "{{if .items}}{{range .items}}${SELECTOR}{{end}}{{else}}${SELECTOR}{{end}}"
}
parse()
{
    local isFirst="${1?}"; shift
    readarray results

    local IFS=' '
    if [ ${#results[@]} -eq 0 ]; then
	printf -v kcCommand '%q ' kubectl get pods "${kubectlGlobalArgs[@]}" ${podFilter:+|} "${podFilter[@]}" ${containerFilter:+|} "${containerFilter[@]}"
	if [ "$isAllowNonexistentPods" ]; then
	    spinningprintf "$isFirst" 'No results for %s yet.' "${podPattern}${container:+ -c $container}"
	    return 0
	else
	    spinningprintf "$isFirst" 'ERROR: No results for %s' "${kcCommand// \\| / | }"
	    return 1
	fi
    elif [ ${#results[@]} -gt 1 ]; then
	typeset -a runningResults=()
	local r
	for r in "${results[@]}"
	do
	    read -r pod containerArg container restartCount startTimeOrState _ <<< "$r"
	    [ "$startTimeOrState" ] || continue
	    date --date "$startTimeOrState" +%s >/dev/null 2>&1 && runningResults+=("$r")
	done

	if [ ${#runningResults[@]} -eq 0 ]; then
	    printErrorResults "ERROR: Multiple PODs match, but none is running:" "${results[@]%% *}"
	    return 1
	elif [ ${#runningResults[@]} -eq 1 ]; then
	    results=("${runningResults[@]}")
	else
	    printErrorResults "ERROR: Multiple PODs are running:" "${runningResults[@]%% *}"
	    return 1
	fi
    fi

    local startEpoch
    read -r pod containerArg container restartCount startTimeOrState _ <<< "${results[0]}"

    : "${pod:?}"
    if [ -z "$startTimeOrState" ]; then
	local phase="$(kubectl "${kubectlGlobalArgs[@]}" get pod "$pod" -o go-template --template '{{.state.phase}}')"
	if [ "$phase" ]; then
	    spinningprintf "$isFirst" '%s (%d restarts) is currently in phase %s.' "$pod" "$restartCount" "$phase"
	else
	    spinningprintf "$isFirst" '%s (%d restarts) currently has an unknown status.' "$pod" "$restartCount"
	fi
	return 0
    fi

    : "${containerArg:?}" "${container:?}" "${startTimeOrState:?}"
    if ! startEpoch=$(date --date "$startTimeOrState" +%s 2>/dev/null); then
	read -r firstRestartCount lastState lastDate < "$lastStateFilespec"
	local restartCountDelta=$((restartCount - ${firstRestartCount:-$restartCount}))
	local restartNote=''; [ $restartCountDelta -gt 0 ] && restartNote="$restartCountDelta while waiting"

	if [ "$lastState" = "$startTimeOrState" -a "$lastDate" ]; then
	    spinningprintf "$isFirst" '%s -c %s (%d restarts%s) has been in status %s %s.' "$pod" "$container" "$restartCount" "${restartNote:+; }${restartNote}" "$startTimeOrState" "$(showDuration "$lastDate")"
	else
	    printf >&2 '%d %s %s\n' ${firstRestartCount:-$restartCount} "$startTimeOrState" "$(date --utc +%FT%TZ)" > "$lastStateFilespec"
	    spinningprintf "$isFirst" '%s -c %s (%d restarts%s) is currently in status %s.' "$pod" "$container" "$restartCount" "${restartNote:+; }${restartNote}" "$startTimeOrState"
	fi

	return 0
    fi

    local now=$(date +%s)
    local uptimeInSeconds=$((now - startEpoch))

    if [ $uptimeInSeconds -gt $KUBECTL_WAIT_MAX_UPTIME_IN_SECONDS_FOR_NEWNESS ]; then
	spinningprintf "$isFirst" '%s -c %s (%d restarts) is not yet down (started %s).' "$pod" "$container" "$restartCount" "$(showDate "$startTimeOrState")"
	return 0
    fi

    uptimePlural=s; [ $uptimeInSeconds -eq 1 ] && uptimePlural=
    statusprintf "$isFirst" '%s -c %s (%d restarts) started %d second%s ago.' "$pod" "$container" "$restartCount" "$uptimeInSeconds" "$uptimePlural"
    [ $# -gt 0 ] || return 99
    execute "$@"
}
execute()
{
    # Some kubectl commands (e.g. exec -it) need to read from stdin; restore it.
    exec 0<&6

    # Appending pod and container name after SUBCOMMAND may interfere with it
    # (e.g. "kubectl exec -- sh -c 'uname -a'"; the shell's -c is different from
    # kubectl's -c CONTAINER). Therefore, insert directly after the kubectl
    # command; for that, we need to consider our aliases (and possible nesting
    # of them).
    typeset -a kubectlCommand=("${1:?}"); shift
    while type -t "kubectl-$1" >/dev/null
    do
	kubectlCommand+=("$1"); shift
    done

    kubectl-wrapper "${kubectlGlobalArgs[@]}" "${kubectlCommand[@]}" "$pod" "$containerArg" "$container" "$@" \
	&& return 99
}



exec 6<&0   # Save stdin.

lastStateFilespec="$(mktemp --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${TMPDIR:-/tmp}/$(basename -- "$0").$$$RANDOM")"
: > "$lastStateFilespec"
[ "$DEBUG" ] || trap 'rm "$lastStateFilespec" 2>/dev/null' EXIT

isFirst=t
while :
do
    eval 'getPodContainerStartTimes "${kubectlGlobalArgs[@]}"' \
	"${podFilter:+|}" '"${podFilter[@]}"' \
	"${containerFilter:+|}" '"${containerFilter[@]}"' \
	| parse "$isFirst" "$@"
    status=$?
    case $status in
	0)  sleep "$KUBECTL_WAIT_INTERVAL";;
	99) exit 0;;
	*)  exit $status;;
    esac
    isFirst=
done
