#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "[-m|--match PATTERN [-m ...]] [-v|--var NAME [-v ...]] [--include-secrets] [KUBECTL-ARGS ...] [POD-NAME ...] [-- EXPR] [-c CONTAINER|''] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
List the environments [matching PATTERN] of each container [of container
CONTAINER] for PODs [matching EXPR].
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --match|-m PATTERN	Only show environment variables matching (basic,
			anchored to the beginning but not the end) PATTERN.
    --var|-v NAME	Only show environment variables with NAME.
    --include-secrets	Also retrieve the values of referenced secrets.
HELPTEXT
}

typeset -a kubectlNamespaceArgs=()
typeset -a getPodArgs=()
typeset -a grepArgs=()
isLiteralPattern=
isIncludeSecrets=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--all-namespaces|-A)
			kubectlNamespaceArgs+=("$1"); shift;;
	--namespace|-n|-l|--cluster|--context)
			kubectlNamespaceArgs+=("$1" "$2"); shift; shift;;

	--match|-m)	shift
			grepArgs+=(-e "^${1//\$/=}")	# Convert end-of-line anchor to assignment, as that's the format we're filtering.
			shift
			;;
	--var|-v)	shift
			literalPattern="$(printf %s "${1:?}" | sed -e 's/[][\$*.^]/\\&/g')"
			shift
			grepArgs+=(-e "^${literalPattern}=")
			isLiteralPattern=t
			;;
	--include-secrets)
			shift; isIncludeSecrets=t;;
	--)		getPodArgs+=("$1"); shift; break;;
	*)		getPodArgs+=("$1"); shift;;
    esac
done
set -- "${getPodArgs[@]}" "$@"

typeset -a postGrepArgs=()
if [ "$isLiteralPattern" ] && [ "${#grepArgs[@]}" -eq 2 ]; then
    # DWIM: Omit the NAME= prefix when matching a single environment variable and
    # join the POD name header with the value into a table.
    postGrepArgs=(sed \
	# Special case for when the POD prefix is omitted due to single matching POD.
	-e "s/^${literalPattern}=//" -e t \
	# Join the POD name with the value.
	-e "/^  [^ ]\\+/{ N; s/^  \\([^ ]\\+\\):\\n${literalPattern}=\\(.*\\)\$/\1\t\2/; }"
    )
fi

typeset -a emptyFilter=(sed
    -e '/^  [^ ]\+/{ N; /\n$/d }'
    # Also suppress the final empty line. Note: The filter has to come last so
    # that the previous filters can still indiscriminately use an empty line as
    # the block separator without a special case of the last line.
    -e '${ /^$/d }'
)

typeset -a singleResultFilter=()
typeset -a finalFilter=(sed \
    -e 's#^\t##'
    -e 't noPod'
    -e 's#^\([^\t]\+\)\t#  \1:\n#'
    -e ':noPod'
    -e 's#\t#\n#g'
)

filterContainer="$KUBECTL_DEFAULT_CONTAINER"
if [ $# -ge 2 ] && [ "${*:(-2):1}" = '-c' ]; then
    filterContainer="${!#}"
    set -- "${@:1:$(($#-2))}"
    # PODs that don't have any matching containers are omitted automatically here.
fi

typeset -a podFilter=()
if [ $# -ge 2 ] && [ "${*:(-2):1}" = -- ]; then
    podFilterExpr=${!#}
    podFilter=(grep -e "^[^ ]*$podFilterExpr")
    set -- "${@:1:$(($#-2))}"

    # Omit POD prefix if there's only a single matching POD and it exactly
    # matches the passed EXPR.
    literalPodFilterExpr=$(printf %s "$podFilterExpr" | sed -e 's/[][\$*.^#]/\\&/g')
    singleResultFilter=(sed -e '1!b' -e "\$s#^${literalPodFilterExpr}\\( -c [^[:space:]]]\\+\\)\\?\\t#\t#")
fi

: ${KUBECTL_IGNORE_CONTAINERNAMES='\(kubernetes-\)\?vault-renew'}
typeset -a containerFilter=()
if [ "$KUBECTL_IGNORE_CONTAINERNAMES" ]; then
    ignoredContainerBranches="${KUBECTL_IGNORE_CONTAINERNAMES// /\\|}"
    containerFilter=(sed -e "/ -c \\(${ignoredContainerBranches}\\)\t/d")
fi

configMapExpander()
{
    while IFS=$'\n' read -r line
    do
	if [[ "$line" =~ ^â‡’\ (ðŸ”‘)?([^[:space:]]+)$ ]]; then
	    printf '%s\n' "$line"
	    local isSecret="${BASH_REMATCH[1]}" name="${BASH_REMATCH[2]}"
	    if [ "$isSecret" ]; then
		[ "$isIncludeSecrets" ] \
		    && local valueIdentifier='{{$value}}' \
		    || local valueIdentifier='ðŸ”‘'
		kubectl "${kubectlNamespaceArgs[@]}" get secret "$name" -o go-template --template '{{range $key, $value := .data}}{{$key}}='"$valueIdentifier"'{{"\n"}}{{end}}'
	    else
		kubectl "${kubectlNamespaceArgs[@]}" get configmap "$name" -o go-template --template '{{range $key, $value := .data}}{{$key}}={{$value}}{{"\n"}}{{end}}'
	    fi
	elif [[ "$line" =~ ^([^[:space:]]+)\ â†’\ ([^[:space:]]+)ðŸ”‘([^[:space:]]+)$ ]] && [ "$isIncludeSecrets" ]; then
	    local envVarName="${BASH_REMATCH[1]}" secretKey="${BASH_REMATCH[2]}" name="${BASH_REMATCH[3]}"
	    secretValue="$(kubectl "${kubectlNamespaceArgs[@]}" get secret "$name" -o go-template --template "{{\$value := index .data \"${secretKey#.}\"}}{{\$value}}")" \
		&& printf '%s=%s\n' "$envVarName" "$secretValue" \
		|| printf '%s\n' "$line"
	else
	    printf '%s\n' "$line"
	fi
    done
}

getAllPodContainerEnvironments()
{
    local -r environmentsExpr='{{range .env}}{{.name}}{{if .valueFrom}} â†’ .{{if .valueFrom.secretKeyRef}}{{.valueFrom.secretKeyRef.key}}ðŸ”‘{{.valueFrom.secretKeyRef.name}}{{else}}{{.valueFrom.fieldRef.fieldPath}}{{end}}{{else}}={{.value}}{{end}}{{"\t"}}{{end}}'\
'{{range .envFrom}}{{if .configMapRef}}â‡’ {{.configMapRef.name}}{{end}}{{if .secretRef}}â‡’ ðŸ”‘{{.secretRef.name}}{{end}}{{"\t"}}{{end}}'
    if [ -n "$filterContainer" ]; then
	local -r SELECTOR='{{$podName := .metadata.name}}{{range .spec.containers}}{{if eq .name "'"$filterContainer"'"}}{{$podName}}{{"\t"}}'"$environmentsExpr"'{{end}}{{"\n"}}{{end}}'
    else
	local -r SELECTOR='{{$podName := .metadata.name}}{{range .spec.containers}}{{$podName}} -c {{.name}}{{"\t"}}'"$environmentsExpr"'{{"\n"}}{{end}}'
    fi
    kubectl "${kubectlNamespaceArgs[@]}" get pods "$@" -o go-template --template "{{if .items}}{{range .items}}{{if not .status.reason}}${SELECTOR}{{end}}{{end}}{{else}}${SELECTOR}{{end}}"
}

eval 'getAllPodContainerEnvironments "$@"' \
    "${podFilter:+|}" '"${podFilter[@]}"' \
    "${containerFilter:+|}" '"${containerFilter[@]}"' \
    "${singleResultFilter:+|}" '"${singleResultFilter[@]}"' \
    "${finalFilter:+|}" '"${finalFilter[@]}"' \
    '| configMapExpander' \
    "${grepArgs:+| grep -e '^  '}" '"${grepArgs[@]}"' \
    "${emptyFilter:+|}" '"${emptyFilter[@]}"' \
    "${postGrepArgs:+|}" '"${postGrepArgs[@]}"'
