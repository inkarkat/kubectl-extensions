#!/bin/bash
shopt -qs extglob

: ${KUBECTL_SIGNAL_COMMAND_JOINER=;}
: ${KUBECTL_SIGNAL_EXEC_END=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    local commonArgs="[-SIGNAL|--signal SIGNAL [--wait]] [--command \"COMMANDLINE\" [...] | --exec SIMPLECOMMAND [...] ${KUBECTL_SIGNAL_EXEC_END} [--exec ...]] [--all | [PKILL-ARGS ...] PATTERN]"
    printf 'Usage: %q %s\n' "$(basename "$1")" "POD [-c CONTAINER|''] $commonArgs [-?|-h|--help]"
    printf 'Usage: %q %s\n' "$(basename "$1")" "[flags] $commonArgs -- POD"
    printf 'Usage: %q %s\n' "$(basename "$1")" "[flags] $commonArgs [--] POD [-c CONTAINER|'']"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Send a signal (default TERM) to the entrypoint process / process(es) matching
PATTERN in a container.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --all		Signal all currently existing processes in the
			container.
    --wait		Wait until the signal has been successfully sent (i.e.
			until such a process is there).
    --command CMD	Execute CMD as a command-line after signalling.
    --exec CMD [...] ${KUBECTL_SIGNAL_EXEC_END}	Execute CMD after signalling; all following arguments
			are taken to be arguments to the CMD until an argument
			consisting of '${KUBECTL_SIGNAL_EXEC_END}' is encountered.
HELPTEXT
}

typeset -a kubectlNamespaceArgs=()
typeset -a pkillArgs=()
typeset -a signalArgs=()
typeset -a otherArgs=()
pkillPattern=
isAll=
isWait=
commands=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--all-namespaces|-A)
			kubectlNamespaceArgs+=("$1"); shift;;
	--namespace|-n|--cluster|--context)
			kubectlNamespaceArgs+=("$1" "$2"); shift; shift;;

	-[flanovwx]*)	pkillArgs+=("$1"); shift;;
	--@(count|full|list-name|list-full|newest|oldest|inverse|lightweight|exact))
			pkillArgs+=("$1"); shift;;
	-[dgGPstuUF])	pkillArgs+=("$1" "${2:?}"); shift; shift;;
	--@(delimiter|pgroup|group|parent|session|terminal|euid|uid|pidfile|ns|nslist))
			pkillArgs+=("$1" "${2:?}"); shift; shift;;

	--signal)	signalArgs+=("$1" "${2:?}"); shift; shift;;
	-@(+([0-9])|?(SIG)[A-Z]+([A-Z0-9])))
			signalArgs+=("$1"); shift;;

	--all)		shift; isAll=t;;
	--wait)		shift; isWait=t;;

	--command)	shift; commands+="${commands:+ $KUBECTL_SIGNAL_COMMAND_JOINER }$1"; shift;;
	--exec)		shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$KUBECTL_SIGNAL_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd+="${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${KUBECTL_SIGNAL_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			commands+="${commands:+ $KUBECTL_SIGNAL_COMMAND_JOINER }${cmd}"
			;;

	--)		break;;
	*)		otherArgs+=("$1"); shift;;
    esac
done
set -- "${otherArgs[@]}" "$@"
if [ $# -eq 0 ]; then
    printUsage "$0"
    exit 2
elif [ "$isAll" ] && [ "$isWait" ]; then
    echo 'ERROR: --all and --wait cannot be combined.'
    echo
    printUsage "$0"
    exit 2
fi >&2

container="$KUBECTL_DEFAULT_CONTAINER"
if [ "${*:(-2):1}" = '-c' ]; then
    # [flags] [PATTERN] [--] POD -c CONTAINER
    pod="${*:(-3):1}"
    container="${!#}"
    [ "${*:(-3):1}" = '--' ] && \
	set -- "${@:1:$(($#-4))}" || \
	set -- "${@:1:$(($#-3))}"

    pkillPattern=; [ $# -gt 0 ] && pkillPattern="${!#}"
    [ $# -eq 0 ] && set -- || set -- "${@:1:$(($#-1))}"
elif [ "${*:(-2):1}" = '--' ]; then
    # [flags] [PATTERN] -- POD
    pod="${!#}"
    container=
    set -- "${@:1:$(($#-2))}"

    pkillPattern=; [ $# -gt 0 ] && pkillPattern="${!#}"
    [ $# -eq 0 ] && set -- || set -- "${@:1:$(($#-1))}"
else
    # POD [-c CONTAINER] [PATTERN]
    pod="$1"; shift
    container=
    if [ "$1" = -c ]; then
	container="${2:?}"
	shift; shift
    fi
    case $# in
	0)  ;;
	1)  pkillPattern="$1"; shift;;
	*)  printUsage "$0" >&2; exit 2;;
    esac
fi

signalCommandErrorSuppression=
if [ ${#pkillArgs[@]} -eq 0 -a -z "$pkillPattern" ]; then
    typeset -a signalCommand=(kill "${signalArgs[@]}")
    if [ "$isAll" ]; then
	printf -v quotedSignalCommand '%q ' "${signalCommand[@]}"
	quotedSignalCommand="${quotedSignalCommand}\$(ps -e -o pid= | grep --invert-match --line-regexp \"[[:space:]]*\$\$\")"
	signalCommand=(sh -c "$quotedSignalCommand 2>/dev/null")
    else
	signalCommand+=(1)  # entrypoint process has PID 1
	signalCommandErrorSuppression='2>/dev/null'	# kill complains when the PID doesn't exist, which is suboptimal in a busy loop.
    fi
else
    if [ "$isAll" ]; then
	echo 'ERROR: --all cannot be combined with [PKILL-ARGS ...] PATTERN'
	echo
	printUsage "$0"
	exit 2
    fi >&2

    [ -z "$pkillPattern" ] || pkillArgs+=("$pkillPattern")
    typeset -a signalCommand=(pkill "${signalArgs[@]}" "${pkillArgs[@]}")
fi

printf -v quotedSignalCommand '%q ' "${signalCommand[@]}"
if [ "$isWait" ]; then
    signalCommand=(sh -c "until ${quotedSignalCommand}${signalCommandErrorSuppression:+}${signalCommandErrorSuppression}; do sleep 0.01; done")
fi
if [ -n "$commands" ]; then
    # Turn into a shell command-line if not already done.
    [ "${signalCommand[0]}" = 'sh' ] \
	|| signalCommand=(sh -c "$quotedSignalCommand")

    # Append custom command(s); don't use && as the kill may fail.
    signalCommand[-1]+="; $commands"
fi

exec kubectl-wrapper "${kubectlNamespaceArgs[@]}" exec "$@" "$pod" ${container:+-c "$container"} -- "${signalCommand[@]}"
