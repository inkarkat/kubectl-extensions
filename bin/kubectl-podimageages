#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-v|--verbose] [KUBECTL-ARGS ...] [POD-NAME ...] [-- EXPR] [-c CONTAINER-NAME] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
List the image creation dates of containers running in PODs [matching EXPR] [of
container CONTAINER-NAME].
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --verbose|-v	Include the image names in the output.
HELPTEXT
}

isVerbose=
typeset -a podimagesArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--verbose|-v)	shift; isVerbose=t;;
	--)		podimagesArgs+=("$1"); shift; break;;
	*)		podimagesArgs+=("$1"); shift;;
    esac
done

typeset -A imageAges=()
exitStatus=
while IFS=$'\n' read -r line || { exitStatus="$line"; break; }	# Exit status from the process substitution (<(pipeline)) is lost; return the actual exit status via an incomplete (i.e. missing the newline) last line.
do
    if [ -z "$line" ] || [[ "$line" =~ ^[^[:space:]]+:$ ]]; then
	printf '%s\n' "$line"
	continue
    elif [[ "$line" =~ ^(    )([^[:space:]]+)([[:space:]]+)([^[:space:]]+)$ ]]; then
	indent="${BASH_REMATCH[1]}"
	containerName="${BASH_REMATCH[2]}"
	sep="${BASH_REMATCH[3]}"
	imageName="${BASH_REMATCH[4]}"
    elif [[ "$line" =~ ^([^[:space:]]+)($'\t')([^[:space:]]+)$ ]]; then
	indent=''
	containerName="${BASH_REMATCH[1]}"
	sep="${BASH_REMATCH[2]}"
	imageName="${BASH_REMATCH[3]}"
    else
	indent=''
	containerName=''
	sep=''
	imageName="$line"
    fi

    imageAge="${imageAges["$imageName"]}"
    if [ -z "$imageAge" ]; then
	imageAge="$(regctl image inspect --format '{{.Created.Format "2006-01-02T15:04:05Z07:00" }}' "$imageName")" || imageAge='???'
	imageAges["$imageName"]="$imageAge"
    fi

    printf '%s%s%s%s%s\n' "$indent" "$containerName" "${containerName:+$sep}" "${isVerbose:+$imageName }" "$imageAge"
done < <(kubectl-podimages "${podimagesArgs[@]}" "$@"; printf %d "$?")
exit $exitStatus
